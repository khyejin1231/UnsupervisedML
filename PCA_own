#own implementation

#data preperation: please refer to pca_packages.R
#packages
#install.packages("dplyr")
library("dplyr")
#install.packages("PMA")
library("PMA")
#install.packages("tidyr")
library(tidyr)
#install.packages("DataCombine")
library("DataCombine")
#install.packages("sparsepca")
library("sparsepca")


#Read data
mfifa <- subset(fifa, Position != 'Gk')
#The variables should be centered to have mean zero.
#Furthermore, the results obtained when we perform PCA will also
#depend on whether the variables have been individually scaled.
mfifa$Position <- as.numeric(as.factor(mfifa$Position)) - 1
mfifanum<- select_if(mfifa, is.numeric)
#mfifanum <- scale(mfifanum, scale = TRUE)
mfifanum$mid <- rep(0, nrow(mfifanum)) #mid
mfifanum$mid[which(mfifa$Position == 1)] <- mfifanum$mid[which(mfifa$Position == 1)]+ 1

mfifanum$def <- rep(0, nrow(mfifanum))
mfifanum$def[which(mfifa$Position == 2)] <- mfifanum$def[which(mfifa$Position == 2)]+ 1

mfifanum <- mfifanum[,-1]

X <- as.matrix(mfifanum)

##################functions#####################
#pca

pca <- function(X){
  mcovX <- cov(X, use = "pairwise.complete.obs")
  lpca <- eigen(mcovX)
  return(list("eigen" = lpca$values, "pc" = 
                lpca$vectors))
}



#sparse pca
#rank 1
spcar1 <- function(X, c2, imax){
  
  #initialization
  X <- as.matrix(X)
  n <- nrow(X)
  p <- ncol(X)
  pca <- pca(X)
  v <- as.matrix(pca$pc[,1]) 
  vnorm <- sum(abs(v))
  i <- 0
  
  while(i < imax){
    i <- i + 1
    Xv <- X %*% v
    Xv <- na.omit(Xv) #???
    X <- na.omit(Xv) #???
    u <- Xv / as.numeric(sqrt((t(Xv) %*% Xv))) #How to deal with NAs - changes to 0?
    lambda <- binary_search(vnorm, c2, maxit = 100)
    mtXu <- t(X) %*% u
    
    v <- soft_thresh(mtXu, lambda) / soft_l2norm(mtXu, lambda) # why a number?
    vnorm <- sum(abs(v))
  }
  
  sigma <- t(u) %*% X %*% v
  
  return(list("u" = u, "v" = v, "sigma" = sigma))
}

#sparse pca higher rank
spca <- function(X, k, c2, imax){
  
  lu <- list()
  lv <- list()
  
  X_1 <- X
  
  for (i in 1:k){
    
    result <- spcar1(X_1, c2, imax)
    u <- result$u
    v <- result$v
    lu[i] <- list(u)
    lv[i] <- list(v)
    sigma <- result$sigma
    
    X_1 <- X_1 - sigma * ( u %*% t(v) )
  }
  
  return (list("u" = u, "v" = v, "sigma" = sigma))
}


##### MAIN #####
result <- pca(X)
spcar1(X, 0.01, 5)
spca(X, 3, 0.01, 5)
X%*%(as.matrix(result$pc[,1]))

